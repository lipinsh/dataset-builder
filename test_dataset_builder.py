#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script for Dataset Builder
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import pandas as pd
from datetime import datetime
import tempfile
import shutil

def create_test_excel_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏—Å—Ç–∞ 'Pallet Order'
    pallet_order_data = {
        'Client': ['Client A (+10¬∞C)', 'Client B', 'Client C'],
        'Delivery 1': [5, 3, 0],
        'Delivery 2': [2, 0, 4],
        'Delivery 3': [1, 2, 1]
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏—Å—Ç–∞ 'Collection Plan'
    collection_plan_data = {
        'Load Number': ['L001', 'L002', 'L003'],
        'Collection Site': ['Site A', 'Site B', 'Site C'],
        'Delivery Destination': ['Delivery 1', 'Delivery 2', 'Delivery 3'],
        'Pallets Ordered': [5, 3, 4],
        'Pallet Type': ['Std', 'Euro', 'Std'],
        'Trailer Type': ['Straight', 'Twin', 'DD'],
        'Trailer Fill %': [80, 60, 70],
        'Driver': ['John Doe', 'Jane Smith', 'Bob Johnson']
    }
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_dir = tempfile.mkdtemp()
    test_file_path = os.path.join(temp_dir, 'Lyons collections 01012024.xlsx')
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    with pd.ExcelWriter(test_file_path, engine='openpyxl') as writer:
        pd.DataFrame(pallet_order_data).to_excel(writer, sheet_name='Pallet Order', index=False)
        pd.DataFrame(collection_plan_data).to_excel(writer, sheet_name='Collection Plan', index=False)
    
    return test_file_path, temp_dir

def test_date_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    from dataset_builder import DatasetBuilder
    
    builder = DatasetBuilder()
    
    test_cases = [
        ('Lyons collections 01012024.xlsx', '2024-01-01'),
        ('Lyons collections 31122025.xlsm', '2025-12-31'),
        ('Lyons collections 15062023 v2.xlsx', '2023-06-15'),
        ('Lyons collections 01012024-2.xlsx', '2024-01-01'),
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç:")
    for filename, expected_date in test_cases:
        extracted_date = builder.extract_date_from_filename(filename)
        status = "‚úì" if extracted_date == expected_date else "‚úó"
        print(f"{status} {filename} -> {extracted_date} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_date})")

def test_temperature_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    from dataset_builder import DatasetBuilder
    
    builder = DatasetBuilder()
    
    test_cases = [
        ('Client A (+10¬∞C)', '+10¬∞C'),
        ('Client B', '+3¬∞C'),
        ('Client C (+5¬∞C)', '+5¬∞C'),
        ('Client D (+15C)', '+15¬∞C'),
    ]
    
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:")
    for client_name, expected_temp in test_cases:
        extracted_temp = builder.extract_temperature(client_name)
        status = "‚úì" if extracted_temp == expected_temp else "‚úó"
        print(f"{status} {client_name} -> {extracted_temp} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_temp})")

def test_excel_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–∞"""
    from dataset_builder import DatasetBuilder
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file_path, temp_dir = create_test_excel_file()
    
    try:
        builder = DatasetBuilder()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        results = builder.process_excel_file(test_file_path)
        
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞:")
        print(f"‚úì –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {os.path.basename(test_file_path)}")
        print(f"‚úì –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
        
        if results:
            print(f"‚úì –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {results[0]}")
        
        return len(results) > 0
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        shutil.rmtree(temp_dir)

def test_advanced_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    from dataset_builder_advanced import AdvancedDatasetBuilder
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file_path, temp_dir = create_test_excel_file()
    
    try:
        builder = AdvancedDatasetBuilder()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        results = builder.process_excel_file(test_file_path)
        
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
        print(f"‚úì –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {os.path.basename(test_file_path)}")
        print(f"‚úì –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
        print(f"‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {builder.stats}")
        
        if results:
            print(f"‚úì –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {results[0]}")
        
        return len(results) > 0
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        shutil.rmtree(temp_dir)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dataset Builder ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        test_date_extraction()
        test_temperature_extraction()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Excel
        excel_test_passed = test_excel_processing()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        advanced_test_passed = test_advanced_features()
        
        print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç: ‚úì")
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: ‚úì")
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel: {'‚úì' if excel_test_passed else '‚úó'}")
        print(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {'‚úì' if advanced_test_passed else '‚úó'}")
        
        if excel_test_passed and advanced_test_passed:
            print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()
