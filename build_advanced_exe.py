#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Advanced Build script for creating executable file
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ .exe —Ñ–∞–π–ª–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
"""

import os
import subprocess
import sys
import shutil

def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úì –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False
    
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úì PyInstaller —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyInstaller: {e}")
        return False
    
    return True

def clean_build_dirs():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏"""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            try:
                shutil.rmtree(dir_name)
                print(f"‚úì –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É {dir_name}: {e}")

def build_exe():
    """–°–æ–±–∏—Ä–∞–µ—Ç .exe —Ñ–∞–π–ª"""
    print("–°–æ–±–∏—Ä–∞—é .exe —Ñ–∞–π–ª...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è --add-data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    import platform
    if platform.system() == "Windows":
        data_separator = ";"
    else:
        data_separator = ":"
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",  # –û–¥–∏–Ω —Ñ–∞–π–ª
        "--console",  # –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        "--name=DatasetBuilderAdvanced",  # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        f"--add-data=requirements.txt{data_separator}.",  # –í–∫–ª—é—á–∞–µ–º requirements.txt
        "--hidden-import=pandas",
        "--hidden-import=openpyxl",
        "--hidden-import=pyarrow",
        "--hidden-import=fastparquet",
        "--hidden-import=xlrd",
        "--hidden-import=logging",
        "--hidden-import=typing",
        "--hidden-import=pathlib",
        "--hidden-import=glob",
        "--hidden-import=re",
        "--hidden-import=datetime",
        "--hidden-import=warnings",
        "--clean",  # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        "dataset_builder_advanced.py"
    ]
    
    try:
        subprocess.check_call(cmd)
        print("‚úì –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        return False

def verify_exe():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª"""
    import platform
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    if platform.system() == "Windows":
        exe_name = "DatasetBuilderAdvanced.exe"
    else:
        exe_name = "DatasetBuilderAdvanced"
    
    exe_path = f"dist/{exe_name}"
    
    if os.path.exists(exe_path):
        file_size = os.path.getsize(exe_path) / (1024 * 1024)  # MB
        print(f"‚úì –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exe_path}")
        print(f"‚úì –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} MB")
        return True
    else:
        print(f"‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exe_path}")
        return False

def create_launcher_script():
    """–°–æ–∑–¥–∞–µ—Ç bat-—Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    bat_content = """@echo off
echo === Dataset Builder for Logistics Routes ===
echo.
echo –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...
echo.
DatasetBuilderAdvanced.exe
echo.
echo –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...
pause > nul
"""
    
    bat_path = "dist/run_dataset_builder.bat"
    try:
        with open(bat_path, 'w', encoding='utf-8') as f:
            f.write(bat_content)
        print(f"‚úì –°–æ–∑–¥–∞–Ω bat-—Ñ–∞–π–ª: {bat_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bat-—Ñ–∞–π–ª–∞: {e}")
        return False

def copy_documentation():
    """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –ø–∞–ø–∫—É dist"""
    files_to_copy = ['README.md']
    
    for file_name in files_to_copy:
        if os.path.exists(file_name):
            try:
                shutil.copy2(file_name, f"dist/{file_name}")
                print(f"‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {file_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {file_name}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== Advanced Dataset Builder - Build Script ===")
    print("–°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞")
    print()
    
    try:
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏
        clean_build_dirs()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not install_requirements():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º .exe
        if not build_exe():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å .exe —Ñ–∞–π–ª")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not verify_exe():
            print("‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        # –°–æ–∑–¥–∞–µ–º bat-—Ñ–∞–π–ª
        create_launcher_script()
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        copy_documentation()
        
        print("\nüéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ dist/:")
        print("- DatasetBuilderAdvanced.exe (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª)")
        print("- run_dataset_builder.bat (—Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞)")
        print("- README.md (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)")
        print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞–ø–∫—É dist/ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ run_dataset_builder.bat –∏–ª–∏ DatasetBuilderAdvanced.exe")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()
